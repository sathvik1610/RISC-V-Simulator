.data
array: .word 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100.

partialSums: .word 0, 0, 0, 0
finalSum: .word 0



.text
main:
    la  x5, array
    la  x6, partialSums

    beq x31,0,sum0
    beq x31,1,sum1
    beq x31,2,sum2
    beq x31,3,sum3

sum0:
    addi  x1, x0, 0        # index
    addi  x2, x0, 25       # stop index
    addi  x7, x0, 0        # accumulator
    addi  x9, x0, 4
    mul   x3, x1, x9
    add   x3, x3, x5
loop0:
    beq   x1, x2, done0
    lw    x8, 0(x3)
    add   x7, x7, x8
    addi  x1, x1, 1
    addi  x3, x3, 4
    jal   x0, loop0


sum1:
    addi  x1, x0, 25        # index
    addi  x2, x0, 50
    addi  x7, x0, 0        # accumulator
    addi  x9, x0, 4
    mul   x3, x1, x9
    add   x3, x3, x5
loop1:
    beq   x1, x2, done1
    lw    x8, 0(x3)
    add   x7, x7, x8
    addi  x1, x1, 1
    addi  x3, x3, 4
    jal   x0, loop1

 sum2:
     addi  x1, x0, 50        # index
     addi  x2, x0, 75
     addi  x7, x0, 0        # accumulator
     addi  x9, x0, 4
     mul   x3, x1, x9
     add   x3, x3, x5
 loop2:
     beq   x1, x2, done2
     lw    x8, 0(x3)
     add   x7, x7, x8
     addi  x1, x1, 1
     addi  x3, x3, 4
     jal   x0, loop2

 sum3:
     addi  x1, x0, 75        # index
     addi  x2, x0, 100
     addi  x7, x0, 0        # accumulator
     addi  x9, x0, 4
     mul   x3, x1, x9
     add   x3, x3, x5
 loop3:
     beq   x1, x2, done3
     lw    x8, 0(x3)
     add   x7, x7, x8
     addi  x1, x1, 1
     addi  x3, x3, 4
     jal   x0, loop3

done0:
    sw   x7,  0(x6)

    jal x0, after_sync

done1:
    sw   x7,  4(x6)
    addi x19,x7,0
    jal x0, after_sync

done2:
    sw   x7,  8(x6)

    jal x0, after_sync

done3:
    sw   x7, 12(x6)

    jal x0, after_sync

# everyone lands here once they pass the barrier
after_sync:
     sync
     invld1
    # only hartÂ 1 does the final reduction
    beq  x31, 1, do_reduce
    jal x0,exit

do_reduce:

    la   x13, finalSum
    addi x15, x0, 0        # zero accumulator
    lw   x14,  0(x6)
    add  x15, x15, x14
    lw   x14,  4(x6)
    add  x15, x15, x14
    lw   x14,  8(x6)
    add  x15, x15, x14
    lw   x14, 12(x6)
    add  x15, x15, x14
    lw x18,0(x6)
    sub x15,x15,x18
    add x15,x15,x19
    sw   x15,  0(x13)


exit:
halt

